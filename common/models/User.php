<?php
namespace common\models;

use Yii;
use yii\base\NotSupportedException;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;
use yii\db\Expression;
use yii\web\IdentityInterface;
use cornernote\linkall\LinkAllBehavior;


/**
 * User model
 *
 * @property integer $id
 * @property string $username
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property string $auth_key
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $password write-only password
 */
class User extends ActiveRecord implements IdentityInterface
{
    const STATUS_DELETED = 0;
    const STATUS_ACTIVE = 10;
    public $skill_ids;
    public $imageFile;
    public $education_detail;


    public static $roles =
        [
            40 => 'admin',
            30 => 'officer',
            20 => 'staff',
            10 => 'user'
        ];

    const ROLE_USER = 10;
    const ROLE_STAFF = 20;
    const ROLE_OFFICER = 30;
    const ROLE_ADMIN = 40;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at']
                ],
                'value' => new Expression('NOW()'),
            ],
            LinkAllBehavior::className(),
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            ['status', 'default', 'value' => self::STATUS_ACTIVE],
            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_DELETED]],
            [['username', 'auth_key', 'password_hash', 'email'], 'required'],
            [['user_image'], 'string'],
            [['skill_ids'], 'safe'],
            [['imageFile'], 'file'],
            [['created_at', 'updated_at'], 'safe'],
            [['education_detail'], 'safe'],
            [['status', 'role'], 'integer'],
            [['summary', 'education', 'experience', 'user_image'], 'string'],
            [['role'], 'required', 'message' => 'Role cannot be blank.'],
            [['username', 'password_hash', 'password_reset_token', 'email'], 'string', 'max' => 255],
            [['auth_key'], 'string', 'max' => 32],
            [['username'], 'unique'],
            [['email'], 'unique'],
            ['email', 'email', 'message' => 'Invalid email address.'],
            [['password_reset_token'], 'unique'],
        ];
    }

    /**
     * @return array
     */

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'skill_ids' => 'My Talent',
            'username' => 'Username',
            'auth_key' => 'Auth Key',
            'role' => 'Role',
            'summary' => 'Summary',
            'password_hash' => 'Password Hash',
            'password_reset_token' => 'Password Reset Token',
            'email' => 'Email',
            'education' => 'Education',
            'experience' => 'Experience',
            'imageFile' => 'User Image',
            'user_image' => 'User Image',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'status' => 'Status',
        ];
    }

    public function getStatusArray()
    {
        return [
            self::STATUS_ACTIVE => 'Active',
            self::STATUS_DELETED => 'Deleted',
        ];
    }

    public function getStatusName()
    {
        return ArrayHelper::getValue(self::getStatusArray(), $this->status);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getApplyActivities()
    {
        return $this->hasMany(ApplyActivity::className(), ['user_id' => 'id']);
    }


    public function afterSave($insert, $changedAttributes)
    {
        $skills = [];
        if (!empty($this->skill_ids)){
            foreach ($this->skill_ids as $skill_name) {
                $skill = Skill::getSkillByName($skill_name);
                if ($skill) {
                    $skills[] = $skill;
                }
            }
            $this->linkAll('skills', $skills);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProjects()
    {
        return $this->hasMany(Project::className(), ['user_id' => 'id']);
    }
    public function getSkills(){
        return $this->hasMany(Skill::className(), ['id' => 'skill_id'])
            ->viaTable('skill_set', ['user_id' => 'id']);

    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSkillSets()
    {
        return $this->hasMany(SkillSet::className(), ['user_id' => 'id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEducationDetails()
    {
        return $this->hasMany(EducationDetail::className(), ['user_id' => 'id']);

    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getExperienceDetails()
    {
        return $this->hasMany(ExperienceDetail::className(), ['user_id' => 'id']);
    }
    /**
     * @inheritdoc
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'status' => self::STATUS_ACTIVE,
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return bool
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int) substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }


}
